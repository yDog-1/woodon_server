// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/yDog-1/woodon_server/ent/avator"
	"github.com/yDog-1/woodon_server/ent/user"
)

// Avator is the model entity for the Avator schema.
type Avator struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Bio holds the value of the "bio" field.
	Bio string `json:"bio,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AvatorQuery when eager-loading is set.
	Edges        AvatorEdges `json:"edges"`
	user_avators *int
	selectValues sql.SelectValues
}

// AvatorEdges holds the relations/edges for other nodes in the graph.
type AvatorEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AvatorEdges) OwnerOrErr() (*User, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Avator) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case avator.FieldID:
			values[i] = new(sql.NullInt64)
		case avator.FieldName, avator.FieldBio:
			values[i] = new(sql.NullString)
		case avator.ForeignKeys[0]: // user_avators
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Avator fields.
func (a *Avator) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case avator.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case avator.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				a.Name = value.String
			}
		case avator.FieldBio:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bio", values[i])
			} else if value.Valid {
				a.Bio = value.String
			}
		case avator.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_avators", value)
			} else if value.Valid {
				a.user_avators = new(int)
				*a.user_avators = int(value.Int64)
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Avator.
// This includes values selected through modifiers, order, etc.
func (a *Avator) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the Avator entity.
func (a *Avator) QueryOwner() *UserQuery {
	return NewAvatorClient(a.config).QueryOwner(a)
}

// Update returns a builder for updating this Avator.
// Note that you need to call Avator.Unwrap() before calling this method if this Avator
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Avator) Update() *AvatorUpdateOne {
	return NewAvatorClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Avator entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Avator) Unwrap() *Avator {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Avator is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Avator) String() string {
	var builder strings.Builder
	builder.WriteString("Avator(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("name=")
	builder.WriteString(a.Name)
	builder.WriteString(", ")
	builder.WriteString("bio=")
	builder.WriteString(a.Bio)
	builder.WriteByte(')')
	return builder.String()
}

// Avators is a parsable slice of Avator.
type Avators []*Avator
